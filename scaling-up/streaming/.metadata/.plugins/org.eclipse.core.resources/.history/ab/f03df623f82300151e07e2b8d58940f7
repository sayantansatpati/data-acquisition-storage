package edu.berkeley.mids.scaling.streaming.twitter

import org.apache.spark.streaming.{Seconds, StreamingContext}
import org.apache.spark.SparkContext._
import org.apache.spark.streaming.twitter._
import org.apache.spark.SparkConf
import org.apache.spark.streaming.StreamingContext._
import com.typesafe.config.ConfigFactory
import com.typesafe.config.Config
import scala.collection.mutable.ArrayBuffer

object Twitter {
  
  def parseTweets(tweet: String): Any = {
    val tokens = tweet.split(" ")
    val names = ArrayBuffer[String]()
    val hTags = ArrayBuffer[String]()
    
    tokens.foreach{ t =>
      if (t.startsWith("@"))
        names += t
      if (t.startsWith("#"))
        hTags += t
    }
    for (ht <- hTags) 
      yield (ht, "-", names, 1)
    
  }
  
  def main(args: Array[String]) {
    val conf:Config = ConfigFactory.load();
    val consumerKey = conf.getString("consumerKey")
    println("@@@ Consumer Key: " + consumerKey)
    val consumerSecret = conf.getString("consumerSecret")
    println("@@@ Consumer Secret: " + consumerSecret)
    val accessToken = conf.getString("accessToken")
    println("@@@ Access Token: " + accessToken)
    val accessTokenSecret = conf.getString("accessTokenSecret")
    println("@@@ Access Token Secret: " + accessTokenSecret)
    
    val sampling_interval = conf.getString("sampling_interval")
    println("@@@ Sampling Interval: " + sampling_interval)
    val top_n = conf.getString("top_n")
    println("@@@ Top n tweets: " + top_n)
    
    System.setProperty("twitter4j.oauth.consumerKey", consumerKey)
    System.setProperty("twitter4j.oauth.consumerSecret", consumerSecret)
    System.setProperty("twitter4j.oauth.accessToken", accessToken)
    System.setProperty("twitter4j.oauth.accessTokenSecret", accessTokenSecret)

    val sparkConf = new SparkConf().setAppName("Twitter")
    val ssc = new StreamingContext(sparkConf, Seconds(5))
    val stream = TwitterUtils.createStream(ssc, None)

    //val tweets = stream.map(tweet => tweet.getText())
    val tweets = stream.filter(tweet => tweet.getText.contains(#))
                        .map(tweet => parseTweets(tweet.getText()))
    tweets.print()
    
    sys.ShutdownHookThread {
      println("Gracefully stopping Spark Streaming Application")
      ssc.stop(true, true)
      println("Application stopped")
    }

    ssc.start()
    ssc.awaitTermination()
  }
}